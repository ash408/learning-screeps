visibility across colony (logistician to make decisions on actions based on full context)

unified action across all members (orchestrator that takes decisions and their priority and decides how best to perform required actions including how many units to reassign or if it should even reassign at all)
	- to that affect, have list of assigned and unassigned creeps and priority of action (need to decide how to define that)
	- if priority of request is higher than priority of action, gets reassigned? lots of unnecessary requests in that case how would I clean that up. Maybe have list of creeps by action priority (e.g. 0 priority is unassigned) with different priority queues, assign creeps based on those queues and add action to queue if no available assignees. Might have too many requests after some time, perhaps a max on the queue that will trigger additional spawns if reached? Then a hard cap above that as well, could alert if hard cap is reached. Could also use that queue check to decide if creeps should perform self-upkeep
		- example: orchestrator sees logistician is requesting more guards, so adds guard actions to queue at priority 1. Because of this queue (spawners check queue? how would they know which spawn to use? Maybe actions also include location info) spawner creates new guard at priority 0. Guard then sees action in queue above its own pirority level (0) and takes new action (now at priority 1). Will keep that action ongoing until a completion flag is met (orchestrator would have to track completion and removal of actions as well) until it finds an action at priority 2 or above. If new action is found, it will place its own action back into queue if not complete. If completion flag is met will set its own priority to 0 and action will get cleared. Would need separate pool for currently assigned actions as well, though that might be unnecessary memory considering creeps would need their own context, maybe only one large memory pool instead of individiual creep memories in regards to actions? Dictionary would be most obvious data type

Add version numbers
